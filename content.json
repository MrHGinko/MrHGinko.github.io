{"pages":[{"title":"about","text":"Oops, what a cute squirrel此处应该增加一张“蓝胖”的头像图片 好的, 那么现在开始介绍一下自己, 咳哼. 这里是一个目前已经工作, 且仍然坚持每天摸两把睡觉 (当然是不论输赢的那种)的dota2玩家. 为什么介绍自己, 偏偏是着重dota2呢, 此处应该有一张best dota2图片. 首先, 出于一个无人见识的博客, 介绍自己应该着重于令人印象深刻的点; 其次, 最好是简明扼要, 言简意赅; 突出一下自己最为深刻的记忆; 因此, 我觉得用dota2 player来形容自己是最贴切不过的, 自己也有一种油然而生的亲切感, 而对于95后来说, 我相信在做的各位肯定多多少少都是一个游戏玩家, 可能你没有听说过dota2, 但是你可以来找我, 带你飞; 那么其他的话, 目前是一名尚在努力学习的码农. 我觉得很有必要讨论一下工作和兴趣两者的关联, 我很高兴能够将我的兴趣变成了我的工作, 但是工作必然会带来一些条条框框; 伴随着兴趣的热情也渐渐消散. 有点那个意思, 就是将一首非常好听的歌, 当成了自己的起床铃声. 总之, 加油. 仅以此, 再次怀念一下当年的时光. 害, 想当年啊, 338初中, 1307 || 1313的高中, 到最后的1601的大学. 自己也是, 嘛, 正如开头第一条tag所描述的lazy一样, 加上各种因素, 还是选择早早出来工作了. 可能话题四处飘散, 愿自己真诚以待. wish u happy every day. ❤","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"body {font-family: Arial;} /* Style the tab */ .tab { overflow: hidden; border: 1px solid #ccc; background-color: #f1f1f1; } /* Style the buttons inside the tab */ .tab button { background-color: inherit; float: left; border: none; outline: none; cursor: pointer; padding: 14px 16px; transition: 0.3s; font-size: 17px; } /* Change background color of buttons on hover */ .tab button:hover { background-color: #ddd; } /* Create an active/current tablink class */ .tab button.active { background-color: #ccc; } /* Style the tab content */ .tabcontent { display: none; padding: 6px 12px; border: 1px solid #ccc; border-top: none; }","link":"/css/test.css"}],"posts":[{"title":"2020-02-03日记","text":"新年快到了, 人已在家2021年2月3日 08点27分 很喜欢老妈住的这边, 门外就是一条河流 这先随便找个图床用着, 新浪的没研究来 2020年马上就要过去了, 呼, 先暂且休息下, 明年的事情明年再做打算吧. 感觉当兴趣变成了工作, 还是挺折磨人的; 有一种类似喜欢的歌曲, 变成了自己早起的铃声一样, 渐渐磨掉了当时的那种热情. 更多的可能是工作挺呆板的吧, 也是自己决定学着搭博客的原因; 又苦于时间上加上自己懒, 所以搞了个现成的, 再弄点自定义姑且用着, 而且主题代码恰好也是react感觉很不错喔, 可以好好看看源码. 那么 姑且这样吧, 假期也才刚刚开始. 在这里先祝大家新年快乐. 新年快了, 所以快乐","link":"/2021/02/03/2020-02-03/"},{"title":"2021年6月24日 工作小点","text":"rt, 简单想了一下最近工作的点 首先谈一下最近的, 弔项目用的Next.js React服务端渲染框架(对标Vue Nuxt.js).然后有个需求, 就是IE浏览器要有个提示, 让用户换浏览器. 然后呢, 我们项目先是用了mobx5, IE只要一进入就会发生js语法报错, 提示是mobx使用了symbol 降级mobx, mobx本身提示了可以降级, 使用mobx4 之后, 在开发模式下IE直接白屏, 提示仍然是js报错, 这次连位置都找不到. 无奈之下打包, 因为在生产环境上, 打包后的项目是可以在IE访问到静态页面的, 只是页面上js均失效. 这个问题导致进度很慢, 恰好当时电脑不知道咋回事, 打包异常的卡, cpu磁盘占用都100%. 之后莫名其妙就好了, 真的不明原因 打包后, 无法定位错误, 应该是react本身的执行出了问题. 最开始是打算使用js进行一次警告提示的, 发现写在App.jsx的useEffect(didmount)中完全不起作用, js报错无法定位错误(菜) 之后考虑直接使用css控制一个特殊的div, 使其在IE浏览器下显示, 也算是曲线救国. 之后就是css解决了, 在一个通用的页面组件(组装页面Header与Footer)中, 写入了一个div. 123456789101112131415161718192021222324&lt;style&gt; .globalIEtest { font-size: 16px; width: 100%; height: 0px; overflow: hidden; // \\9 匹配 IE 9 10 11 font-size: 20px\\9; height: auto\\9; text-align: center\\9; } // IE特殊的一个媒体查询. 可以作用到IE9以下版本 @media screen and(-ms-high-contrast:active), (-ms-high-contrast:none) { .globalIEtest { line-height: 36px; font-size: 20px; text-align: center; height: auto; } }&lt;/style&gt; 就目前来看, 还是解决了问题.但是呢, 在Next.js的Issue上找了一下关于这个的问题, 发现Next的Canary版本是可以直接作用到IE浏览器上的. 有关的问题大多也是描述css在IE上有bug. 没怎么深入看下去, 姑且以css解决收尾了 吐槽, 弔V社, 2021年6月24日推出新本子, Spe至宝330级至少￥1k吧, 才能弄到手吐了已经. 现在的话研究下React-dnd拖拽, 有一个多区域限定拖拽的功能. 说实话这做起来随便画, 丝毫不考虑实现难度的UI真的挺欠的. 其实问题也不大, 主要是现在这项目处于页面样式开发, 接口还未提供, 文档也是一塌糊涂, 压根就没有需求文档, 都是UI和部门领导口头拍板, 3月份原型图初版出来后一直改到现在, 直到现在, 部分在开发的页面还有新的小(??)的改动. 这种开发模式真的挺折磨人的, 不知道写出来的东西有啥意义但是你又得写, 写了还得改, 改了还不一定确保后续会不会再改. ==姑且是 继续努力吧==","link":"/2021/06/24/2021%E5%B9%B46%E6%9C%8824%E6%97%A5-%E5%B7%A5%E4%BD%9C%E5%B0%8F%E7%82%B9/"},{"title":"FN Sea","text":"就这样沉入海中吧.","link":"/2021/03/27/FN-Sea/"},{"title":"King of Wisdom","text":"有关智慧之王 - 威斯顿的设定. 早期设定 自创造主Alice的想法中诞生的古老龙族之一, 第三子, 继承了Alice的智慧, 也继承了Alice永无止尽的求知欲. 自Alice创造古老龙族中的八子之一, 是唯一一个出生后身体孱弱, 毫无力量的龙. 自然被其他兄弟姐妹欺负.曾询问Alice创造龙族的理由, Alice告诉她, 真相藏在生命之中, 反问威斯顿生命的意义.渴望知识, 渴望智慧, 渴望真相, 却又没有龙族应有的强横实力的威斯顿决定云游世界. 在这里需要介绍一下古老龙族的第八子, 托娜丽(暂定), 自Alice对于死亡的思考而诞生, 虽然拥有力量但是身体异常孱弱, 成长后身体更是每况愈下.由于彼此之间诞生的时间相差无几, 作为龙族刚诞生的弱者, 威斯顿自然与托娜丽互相取暖.成长后, 威斯顿也依旧照料着托娜丽, 两者的关系只能说是, 弱者之间的抱团取暖. 由于威斯顿打算周游世界, 而托娜丽想一同前往, 此时世界已经趋近完整, Alice自龙族成长以后便陷入了沉睡.龙族毫无疑问是此时的霸主, 继承力量与贪欲的龙渴望支配着支配世界, 满足自己的欲望. 世界的生命因此陷入了龙族喜怒无常的支配之中. 威斯顿与托娜丽离开龙族诞生之地, 在如今(在故事讲述发生的远古时间)龙族支配的大地上周游世界. 发生的一系列故事待定. 托娜丽在旅途中, 询问威斯顿有关死亡的问题. 威斯顿直言自己并不知道, 但渴望知道. 托娜丽告诉他死亡是生命拥有的祝福, 也是Alice所渴望之物必然需要的某种前置条件. 自诞生起就无比孱弱的托娜丽, 在旅途中经历了许多的事情, 最后在威斯顿的眼前自杀身亡, 并将名为”死亡”的祝福赠予了威斯顿. 在旅途中, 威斯顿渐渐领悟了世界运行的秘密, 自此, 名为魔法的奇迹, 由威斯顿定义为魔力的物质, 经由规则进行代价交换得以实施, 威斯顿在旅途中不断优化”奇迹”, 作为自己的力量. 托娜丽的死亡带给威斯顿的冲击是不可言喻的, 因为托娜丽的死亡, 威斯顿准备启程回到龙族诞生之地. 告知了托娜丽的死亡, 同属古龙的兄弟姐妹只是淡然而过, 并不认为如此弱小的托娜丽, 死后会给他们带来什么问题.在旅行途中见证的苦难, 与生命不合理的死亡, 自知自己渴望的真相就藏在生命之中的威斯顿, 准备屠杀其他古龙. 为了更深刻的理解Alice所订立的世界的规则, 也是加强自己所创造的奇迹的力量, 威斯顿决定第二次周游世界 此间, 第一个愿望降临世界, 与威斯顿有了第一次接触.此次接触, 威斯顿起初不以为意, 但因为Alice之血的原因, 威斯顿陷入了第一个愿望的梦中, 从而得到了部分预测未来的能力. 期间发生了很多事情, 威斯顿逐渐认为如今古龙的统治, 并不利于世界的发展, 日渐确定了屠杀古龙的目标. 在月圆之夜, 威斯顿使用奇迹, 部分割离了托娜丽的”死亡”, 制成了名为”死亡”的诅咒. 托娜丽…… 帮助我吧.","link":"/2021/08/24/King-of-Wisdom/"},{"title":"Novel-Dream2","text":"2021年11月17日 记录一下第二篇 其实有很多点子 设定调整.智慧之王 - 威斯顿(Wisdom) 有关终末之海的留存设定.任何物质, 在进入终末之海之后, 几乎都会回归(卷入)到伟大的意志中. 成为第一愿望(原初)的一部分.而威斯顿在早期达成与原初的交易后, 进入终末之海甚至接触了海水(永无止尽的时间), 仍能保持自我.这可令原初匪夷所思, 而之所以能这样, 首先是第一, Ash(第三愿望)所给予的威斯顿的部分知识.最重要的是, 威斯顿在统领龙族, 在与原初交易之前, 就已经在构思一个奇迹, 一个使自己得以在终末之海都得以保持自我的奇迹.也就是后来足以令Alice等神都为之惊叹的奇迹 - 仿造终末之海 凭借这个奇迹, 威斯顿侵蚀着终末之海的部分范围, 得以创造出一小块安全的领地, 进而保持自我. 即便如此, 效果之微弱令威斯顿大感以外, 在他预估中, 仿造终末之海应该可以占领一块更为广阔的领地.在探究(作死)的心下, 也有可能是受到自身的诅咒下, 威斯顿希望探求终末之海中海水的构成物质.这也是导致威斯顿后面一直沉睡的原因, 外表也因此大幅变化, 表现形式为剧烈的衰老, 龙鳞脱落. (尽管不会因此死去)海水的构成物质是过往永无止尽的时光, 失败过往的沉淀物, 到后面无一例外都是恒久的孤独.仅仅是一丁点, 就导致了威斯顿陷入了长眠. 待定结局并未死去, 创生的生命托娜丽成为了世界树记忆的根源, 进而导致可以利用永誓追忆的诅咒再次复生.一直沉睡在终末之海中, 即使新世界诞生了也一直如此.直到新生世界, 权能确定了世界已经趋于稳定, 而世界又可以诞生新的世界后, 舍弃了在世界的肉体追寻自我诞生的秘密后, 借由权能的肉体再次复生 (第二部剧情) 待定设定 仿造终末之海后来也使雪得以喘息片刻, 在这块区域, 威斯顿给予了雪祝福, 并教导了她守护的奇迹. 同时也延缓了雪体内的\"血液\", 使雪有更多的时间确定自己的愿望. 在结尾成为兰(静止的意志, 冬创造的第一个可以思考的生命体)撕裂一部分终末之海的根基, 同时也是后来樱扎根的地方.以此连接宇的世界树, 得以使世界拥有自我的时间.托娜丽化作世界树的记忆, 仿造终末之海一并融入了世界树的记忆中, 同时也是威斯顿复活的关键. 雪 消融寄托愿望之人在许多决定的未来中, 前夕会因为出生时火元素(冰)缺失导致失温而夭折.当冬到来后, 为了报答雪一家, 利用自身的血液(命运)拯救了她, 也使得她与宇的命运紧紧相连.在游牧冰雪之地, 多数命运里会受到权能的影响, 导致其父身亡.随后被游击队拯救到冬雪城, 与其母红, 宇, 冬建立了更深的羁绊.于冬雪城中入学, 受到冬之血的影响, 测试时魔力强大.因为出生时几近夭折, 小时候体力微弱, 因此很依赖同龄的宇, 性格上怕生, 对陌生人表现冷淡.魔力的强大在成长后逐渐令她身体变得健康, 充满活力. 因为幼时的原因有着绚丽的银发.在测试后, 因为宇的能力(镜), 当时复制了雪狼的火元素(冰)但无法测定法力值.之后分班时要求和宇一班而大闹一场, 最后得偿所愿. 在故事行进中, 渐渐受冬之血影响, 会被拉入未来的梦境中, 梦境中自己大都都是英年早逝.异常真实的梦境, 而同时自己身体也有着微妙的反应. 雪一直对此沉默不语, 即使是宇也不曾提起.直至一次梦中, 她进入了终末之海(冬此时并不知道终末之海的存在), 在其中遇见了智慧之王威斯顿.仅仅在书本中就有着无数传说的智慧之王, 雪感到震惊甚至恐慌, 但此时威斯顿已经陷入了终末之海的无尽时间之中.而当海潮涌来, 雪本能地知觉到了其中的危险, 而威斯顿使用知识之海开辟的小块空间才是安全之地, 迫不得已雪只能逃向威斯顿身旁.命运就此流转, 威斯顿被唤醒, 在预言中威斯顿将醒来两次, 这是第一次.威斯顿审视着眼前脆弱的生命, 知晓了其生命的终点, 也给予了她恳切的建议. 不得不说, 雪与托娜丽有着十分相像的地方","link":"/2021/11/17/Novel-Dream2/"},{"title":"Some Idea","text":"一些非常离谱的想法, 关于自己工作的内容. 说实话, 疲累是肯定的. 工作如果不是兴趣使然, 那必然陷入无止境的胡思乱想中. 前后端的选择 当时说实话是没想那么多, 毕竟一穷二白的, 没资源没门路, 努力也没有方向, 纯兴趣使然. CURD, backend跑不开的代码, 建库, 关系表, 起服务, 我对java, python这类语言的理解大概就到这了, 当然还有当时心里的天花板优化算法, 什么查询啦, 动态规划啦, 巴拉巴拉一堆. 选了frontend原因很简单啊, 因为从内容上来说, 前端面对的是业务, 是需求, 有着相当大的可变, 可塑, 随机性. 是backend完全比不了的. 另外最主要的原因还是当时接触过node和npm这类开源社区, 口号是 “简单上手, 工资就有” 当然还是有相当的兴趣在里面的, 比起backend代码需要一个完整的流程, frontend反馈非常迅速, 可以随时写点好看的小demo; 或者一些花里胡哨的纯展示, 比如当时的这个网站, 当时是真的被html + css惊艳到了, 寥寥几行代码, 就能实现如此酷炫的动画. 从此中毒. 然而哪有那么轻松呢? 永无止尽的需求变化 做天样式调整今天页面重构, 这时候就突出一个前端的工作保留时间(维持时间?)非常不稳定, 比起后端代码一旦确定, 优化完后几乎雷打不动, 接口摆在那等着对接就完了. 而前端就完全相反, 可能在体量大的队伍中, 会显得相对稳定, 但是一旦发生整站重构, 前端的工作量几乎是成倍上涨. 跟别论还有一直变化的需求. 虽说这些都可以被控制, 但是当体量相对较小, 且没有相对稳定, 正式的流程, 仅凭一些部门, 领导的一句话, 需求就纷繁而至, 甚至连合理性, 改动带来的影响都忽略不计, 因为连这些项目都相当小. 代码是精致的东西, 每一块精致的积木, 搭在一起终会成为叹为观止的艺术品. 而这东倒西歪的东西可不是我所追求的事物. 说实话疲累的来源其实非常简单, 面对几乎是不合道理, 乱来一通的需求调整, 真的是非常的反感. 怎么拒绝呢, 我想唯一解法还是提桶跑路找个队伍更正式的. 或者说, 一己之力挽狂澜, 那不好意思我真没这本事. 可能至今为止都是一些情绪, 牢骚的发泄. 下面搞点未来记录吧. 目前个人想法是希望往长沙找份持续性稳定, 感观上过得去的工作, 当然最好是有大佬带, 转行不考虑吧. 毕竟兴趣还在. 而且隔行如隔山, 这点是我最大的阻力, 我个人也不想改变.(有想法搞个公务员, 但是想想也不是不可以嗷.) 技术上还是以React为主, 说到React真的是非常的nice. Vue3.0没用过, 但是自我认识的Vue2.1, 我感觉还是React非常棒. 创新hook函数式组件, useState和useEffect两把利器直接让hook组件变得非常友好可用, 就是这个useState是异步更新且还是收集一起更新, 有时候新状态不能及时拿到. 上面那个问题, mobx完美解决, 中小项目加上内部一些严格的写法, mobx灵活小巧, 双向绑定的能力简直是爽上加爽. Redux, 说实话这个东西有点久没用了, 但是完全无法否定的是, 严格的控制流程, 包括Redux tool for chrome的调试, 使得bug无处遁形, 大型应用上Redux应该是没跑的第一选择, 全局State监听配合Immutable做修改, 当时在公司里用这个自测几乎完全不会出问题. 印象非常深刻. jsx语法真的是太好用了, 自我感觉是比Vue的template更加易懂, 更容易理解, 且Vue script标签中填入data 利用闭包特性创建data状态, 我是更喜欢类组件里面直接使用constructor声明state, 而诸如methods, computed等等也需要自己控制实现, 当然 性能优化上Vue是比React更智能, 不能说更细致吧, 因为React的优化得自己来, memo, useCallback等. 总而言之, 只要你吹React, 就OK. 当然我也不排斥Vue, uni-app我觉得还是有一战之力的. 但是UI库上, 我还是觉得React这边生态上比Vue要完善不少 暂时就这样吧, 目前是希望找个国企的技术岗, 虽然github这博客没人看, 如果有意请联系QQ 1953555067. 谢谢!","link":"/2021/04/21/Some-Idea/"},{"title":"demo","text":"测试用 Tabs Click on the buttons inside the tabbed menu: London Paris Tokyo London London is the capital city of England. Paris Paris is the capital of France. Tokyo Tokyo is the capital of Japan. function openCity(evt, cityName) { var i, tabcontent, tablinks; tabcontent = document.getElementsByClassName(\"tabcontent\"); for (i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = \"none\"; } tablinks = document.getElementsByClassName(\"tablinks\"); for (i = 0; i < tablinks.length; i++) { tablinks[i].className = tablinks[i].className.replace(\" active\", \"\"); } document.getElementById(cityName).style.display = \"block\"; evt.currentTarget.className += \" active\"; }","link":"/2021/04/23/demo/"},{"title":"electron小测试","text":"There is a small eletron test相关code 坑点比较多, 主要是官网给的example, quick-start, 其中的electron版本针对11.2.3.在前段时间大版本更新变为12. 这就导致一些配置上的调整, 所以现在quick-start的源码拉下来还需要做调整. 详情可以看我的源码. electron挺有意思的, 不在乎你用什么东西写出来内部的’应用’, 它只是提供一层能够运行在桌面系统的应用软件的外壳, 也就是打包. 所以内部代码几乎就是js, 不过似乎是以module.exports, 毕竟是node呀. Import tips12345678910111213 webPreferences: { nodeIntegration: true, contextIsolation: false,}// 以上配置 nodeIntegration: 开启node contextIsolation: 上下文隔离(关)// 在11.2.3以后版本如果只开启nodeIntegration 那么renderer中仍无法进行node api的使用// 需要配合 contextIsolation: false// 以下是目前的正常使用, 需要通过preload进行一次中转, 通过自定义暴露api出去给renderer进行调用webPreferences: { preload: path.join(__dirname, 'preload.js'), nodeIntegration: true} 根据quick-start的可运行案例, 以及官方文档的调整(文档确实是有说明, 近期改动过). 从12版本开始 electron中, js如果要使用node api的话. 需要 创建preload.js文件, 且开启nodeIntegration(true), 后面配置是使得preload.js文件可以使用node的api 配置好后此时仍然只有preload.js中 允许node api的使用, 其他文件都不行, 在quick-start案例中, index.html的script标签中执行了require, electron 12版本后会报错. 通过contextBridge(上下文连接), 由exposeInMainWorld(key, { functionObj }) 的形式, 将允许调用node api的方法暴露出去 使得其他的js 或者 html 脚本中可以执行. 1234567891011const {contextBridge } = require('electron');// 需要通过preload 暴露出去给renderer使用// renderer在5.0以后版本, 已经不能直接使用node的api了contextBridge.exposeInMainWorld('myAPI', { sayHello: () =&gt; { document.write('hello Dev!'); console.log(process); alert('process: ' + process.version); }}) 虽说如此感觉还是很麻烦, 而上方 contextIsolation: false后 则表现形式会和electron 11版本及以前一致, 增加这个配置后, quick-start案例就可以正常使用了. websocket chat room首先安装一个 ws 依赖, 以类似启动express服务器的形式, 启动一个webSocket server端 12345678910111213141516var ws = require('ws');wsServer.boardcast = function (str) { wsServer.clients.forEach(function (client) { client.send(str); });}var wsServer = new ws.Server({ host: &quot;192.168.4.96&quot;, port: &quot;8801&quot;,});wsServer.on('connection', function (ws) { ws.on('message', function (obj) { wsServer.boardcast(obj);}); ws.on('close', function (obj) { wsServer.boardcast(obj);});}); connection中监听来自客户端的 发送事件(message) 断开事件(close) 通过 ws对象的clients =&gt; 即所有连接ws的客户端, 通过遍历取得其client, 随后使用send进行消息发送. electron应用中, 在electron . 命令行操作中, 实质上electron本身就启动了一个node服务器. 在我的源码中, 进行局域网测试时, main.js最后引入的wsserver.js 只需要有一方进行使用即可 (需要注意ip地址的更换, 要替换为开启wsserver的主机ip), 另一方(其他所有)都需要注释掉require(wsserver)这一行代码. 总体来说, 实际上是探索了一下websocket的使用. electron本身的ipc根本没有用到. 这才是electron的核心部分 进程通信 ipcMain ipcRender. 有机会下次再见啦 Wish you Happy Every Day ~","link":"/2021/03/13/electron%E5%B0%8F%E6%B5%8B%E8%AF%95/"},{"title":"正式启动","text":"正式启动首先是, 还有很多待完成的工作. 姑且以todoList形式描述出来. 使用了 github action 完成了自动部署. action 完成的几个条件 hexo 的配置中. deploy 指定的 git 地址需为 ssh 形式 action 中, 需要指定 ssh private key, 且参数名要与项目的 secret 一致. 使用了 icarus 主题. 熟悉一下 markdown 语法. 待替换自定义. 待新增 live2d. 待新增播放器. 这三问题有点难搞, 姑且是同步下方的自动部署问题. 域名问题, 去年的域名忘记交费了, 也是顺路重新买一个吧. 经常性?更新博客. 其次是一些目前该博客比较麻烦的问题. 当然都是未解决啦. 使用 github action 自动部署后, 该博客的主题 icarus 需要以 npm install 的形式添加到项目依赖中, 如此一来, 自定义功能实现非常受限, 大量的功能, 界面, 样式等等无法实现自定义. 其次就是这个排版呀, 无法进行首行缩进 vscode 还是 typora 中设置了首行缩进预览无效; vscode 中用 tab 缩进后, 改行自动变成代码块. 很奇妙. 唔, 还要整理出一些, categories 的条目, 粒度不大不小, 刚刚够用, 很有难度; 至于 tags 就随便写了, 个人觉得无关紧要. github.io 似乎被墙了 百度说是电信的 dns 受到污染, 恰巧目前住的地方用的是电信宽带. 真实性不得而知. (懒到没替换 dns 试试到底是不是.)","link":"/2021/02/01/%E6%AD%A3%E5%BC%8F%E5%90%AF%E5%8A%A8/"},{"title":"Novel-Dream","text":"逐渐多了起来一些古古怪怪的设定以及剧情 初始设定更改.原初, 第一个愿望自世界诞生, 到选定人类为棋子, 降临肉身(Ash), 明确目标. 带领人类期间受身体残存的记忆影响, 在不自觉的情况下渐渐了解感情.于蛇人族一战中, 因为后方的孩童队伍被蛇人族设计偷袭导致大量伤亡, 因此接触到自身愿望, 对还未归于自身愿望的意志未能得到实现, 而此景正是孩子还未成长, 愿望未能实现, 进而愤怒, 成为第一个堕落者, Alice之血至此凝结. 于智慧之王 - 威斯顿有交易, 交易的点很少, 因为威斯顿的问题非常刁钻, 很多不便回答.姑且有几点, 威斯顿以奇迹等知识交换, 自身在沉眠之后进入终末之海. (并未提供保护, 为什么威斯顿能在终末之海活着下面说) 奇迹在原初的改造下成为除龙类奇迹以外 弱化版本的魔法, 就此开创生命的全新时代, “魔法”不再是龙族的专属. 在自己进入终末之海后, 协助龙族, 且宣扬自己的智慧与知识, 保证自己存在于历史的记忆中(得以复活的关键) 获得威斯顿的血液, 致使自己成为污染者.(人类专属, 能够生饮下其他种族的血液致使人类的身体变化. 寿命会大幅缩短) 自身能产生, 控制魔兽, 毕竟自己就是混沌的根源. 基于自身诞生的第三愿望灰烬, 拥有能够成为伟大意志的一部分的基础(能够产生愿望), 在冬(意志)的操作下, 混沌分为冬(意志), 艾斯(ICE, 权能)两部分.而灰烬则被世界树吸收, 成为新生世界的一部分. 智慧之王 - 威斯顿 与 遗忘之龙 - 托娜丽威斯顿, 世间唯一所剩的古龙, 将自己的兄弟姐妹尽数屠杀(其他六位古龙), 而托娜丽的存在被所有生命除威斯顿以外都遗忘了.继承了Alice永无止尽的求知欲, 成为了自身的诅咒, 更是自己的诞生意义, 在进入终末之海时一直深受这份求知欲的折磨.古龙拥有永恒的生命, 作为Alice管理世界的一部分, 而Alice在创造完世界基础之后便撒手不问了, 古龙则沉陷在继承于Alice的各种情感中随意行动. 求知的冲动十分可怕, 威斯顿自我描述就是感觉灵魂都被撕裂, 完全不像自己在行动. 行为, 思维都变得撕裂, 一切之后的行为都是为了真相. 因此一直在寻求能够压抑自身求知欲的做法而协同托娜丽一同离开龙之古都出门旅行. 作为八位古龙之一, 此时的威斯顿是其中最弱的古龙, 而托娜丽因为自身继承的是死亡的原因而不受其他古龙待见. 在渴望知晓死亡的意义, 而自我也认为死亡能够使自己从诅咒中解脱而接触托娜丽, 渴望着自身的死亡. 诅咒带来的不仅是求知欲的旺盛, 威斯顿拥有着其他古龙所没有的才智与思考能力, 正是因为如此才会对这份诅咒痛恨无比. 曾问过Alice创造古龙的目的, 不认可Alice的回答: 我希望你们能够稍微影响一下这个世界. 而与他处境十分相似的托娜丽(第八位), 出生起就无法接触除其他哥哥姐姐的生命, 吐息, 接触都会造成生命的死亡.因此威斯顿借由暴食龙的胃的一部分缝纫了可适应体型的皮甲, 从Alice那里学来了能够融入世界的变形术. 托娜丽穿上皮甲后抑制了自身的能力, 而在诞生时, 威斯顿也是与托娜丽感情最好的. 自此托娜丽与威斯顿开始周游世界. 威斯顿见识了很多东西, 食物, 现实. 在旅途中体验着万物演变以及思考着世界诞生的目的, 原因与它的结局.在对世界魔力的循环的意义, 思考着原因与原理, 终于拥有了属于这个世界最为神奇的力量, “奇迹” 作为第一个咏唱奇迹的生命, 威斯顿获得了名为”世界垂怜”的祝福, 奇迹的释放条件大幅度降低, 代价也极其微小. 教导了托娜丽施展奇迹, 同时意识到自身所持有的祝福. 协助托娜丽控制力量, 同时也是满足自己的求知欲, 而威斯顿对自己这种行为感到愤怒, 认为自己只是在利用托娜丽. 在长久的旅途(对龙族可能只是一瞬吧), 目睹的生命的兴衰, 在与托娜丽的交谈中, 帮助托娜丽走出了自身力量的阴影. 托娜丽在此之前都十分厌恶自己, 自能控制自己力量之后就变得开朗许多, 同时也确定了自己对威斯顿的爱慕之情. 托娜丽其实早在Alice创造古龙后的孩童时期, 就对威斯顿十分感激, 一直都是威斯顿不厌其烦的照顾自己. 托娜丽对自己的力量有所察觉, 且意识到自身的生命可能并不永恒, 十分珍惜自己与威斯顿的时光. 威斯顿则未曾在意过托娜丽, 自身对托娜丽挣扎于自身的诅咒, 厌恶着自己利用托娜丽的诅咒. 在威斯顿的思考下, 以及托娜丽的帮助, 托娜丽的力量终于揭开了其神秘的面纱, 名为”死亡”的力量的真实面目实际上是”遗忘”.之所以接触生命会消逝的原因, 是因为生命的存在被托娜丽的力量影响而被世界”遗忘”.托娜丽察觉到自己终究会被力量所影响而被世界遗忘, 威斯顿却对此毫无办法. 为了解决托娜丽的问题, 威斯顿发现自身创造的奇迹并不管用, 这些奇迹在接触托娜丽后都自然消失了, 表现得就像奇迹忘记了自己该如何展现. 此事件为威斯顿后来实现一些奇迹带来了想法. 与此同时, 其他古龙沉溺于Alice带来的感情诅咒中, 尤其以第一古龙为首的力量之龙开始进攻并统治世界. 接下来的旅行, 进度就十分缓慢了 威斯顿需要时间掌控奇迹, 同时发现了奇迹可以随意释放(只能是威斯顿来), 效果几乎是自己想什么就发生什么. 托娜丽的身体状况每况愈下, 威斯顿即使使用治愈奇迹也完全没有效果. 苦寻无果, 威斯顿只能带着托娜丽回去, 同时希望Alice有解决托娜丽诅咒的办法. 世界处于古龙导致的战火中, 威斯顿与托娜丽都感概于战争带来的死亡与萧条. 暂定剧情 Ash入场 将托娜丽拉入意识之海中 告知她即使是Alice也无法消除她的诅咒延缓她的死亡 展示了在意识之海中无数的过往, 无一例外托娜丽在某一刻被所有生命遗忘, 这是诅咒, 也是无可避免的命运. Ash利用了托娜丽对威斯顿的爱慕, 告诉他可以化作祝福永远陪在威斯顿身旁, 然而她的身体却已经撑不住到达Alice身旁来确定Alice是否有办法消除她的诅咒(确实不行, 即使托娜丽能够回到龙之故乡也已经来不及了, Ash在这点上没有骗她) 如果注定被遗忘, 那么至少, 要成为所爱之人永远的回忆. 威斯顿并非没有使用移动的奇迹, 而是试验性的带着托娜丽进行了瞬移, 托娜丽无法通过威斯顿的奇迹移动, 会导致奇迹的消除.只能通过飞行, 步行的方法回到故乡, 然而, 一路上的生命早对古龙族恨之入骨, 此时还处于战火.依稀帮助的生命, 如今却反目成仇, 随处可见的死亡愈加坚定了托娜丽的愿望. 在一次休憩中, 托娜丽终究还是表述了对威斯顿的感情, 于湖边倾诉着自己爱意.然而对于威斯顿来说, 诅咒带来的想法更甚从前, 他想要理解为什么托娜丽会有如此行为, 同时也对爱, 对死亡, 对遗忘有着难以忍受的兴趣.一边拒绝着托娜丽, 一边压抑着自己的诅咒避免对托娜丽带来伤害. 而托娜丽则是拥抱着威斯顿说不需要在意自己的诅咒(此前托娜丽并不知晓威斯顿承受着这般诅咒, 诅咒是Ash告知的)威斯顿便不在顾忌, 两龙在湖畔交合, 自此托娜丽完成了她的宿命, 她将化作祝福永远陪伴威斯顿.在此之后, 托娜丽的身体状况十分危急. 到达龙之故乡后, 早在威斯顿的怀里永远沉眠.威斯顿质问Alice的目的, 以及询问是否有复活的办法, Alice一早就看穿了威斯顿已经掌握奇迹, 反问威斯顿怎么不通过奇迹试试看.然而Alice还是亲口说出了原委, 八位古龙只有托娜丽不是通过自己的血创造, 而是通过代表着意志死亡的湮灭 - Zelta的血创造.死亡是托娜丽无可避免的命运, 只是这一天来的这么快让Alice感到有点惊讶(如果不是Ash从中搅局, 托娜丽的死亡至少还要上千年) 事已至此, 威斯顿不再追问, 由心底涌出的悲伤占据了威斯顿的内心, 感概自己力量的不足, 威斯顿开始了他孤独的第二旅途. 待定剧情 威斯顿再次重返世界之旅, 然而此时世界正处于战火之中, 苦痛, 死亡蔓延的世界与托娜丽的死去互相呼应折磨着威斯顿的内心. 威斯顿还未注意到自身的诅咒已经被托娜丽的祝福(诅咒)压抑住了. 然而是威斯顿自身想要了解托娜丽为何宁可死去, 也要与自己约定下厮守终生的愿望. 托娜丽生前喜欢的花田如今却已被战火毁灭(暂定), 威斯顿进一步认为其他古龙对这个世界只能说是灾难,其他兄弟姐妹一样是沉溺在诅咒的强制情感中无法自已.经历的种种使得威斯顿确定了, 自己来解放其他古龙的生命 第二旅途的经历使得威斯顿确定了解放古龙的目的, 然而自己是不可能打得过剩下其余六位古龙的, 必须要将奇迹的使用彻底掌握.(其实没必要, 世界垂怜的祝福使威斯顿拥有最高级别的奇迹使用权, 只要他想, 几乎是能够单挑赢任何古龙的. 对群的话就比较棘手了) 因此, Ash又又又入场了, 他告知不妨试试托娜丽留下的祝福(威斯顿还未意识到自己已经处于托娜丽的祝福中), 告诉威斯顿放手去做.威斯顿质疑着眼前”人”(Ash是以人的样貌出现在威斯顿面前, 而且看穿了变形术下威斯顿的真身).同时Ash告诉了威斯顿, 一个能够在混沌中坚守心神的办法(后面演变成威斯顿在终末之海中沉眠的奇迹). 并告知威斯顿中有一日会在终末之海再次相见. 在确定自己的力量之后, 威斯顿返回龙之故乡, 在盛大的欢迎晚宴上, 威斯顿至此屠杀了六位古龙.第一位, 力量的古龙, 无比傲慢, 死在了威斯顿至此最强的奇迹之下. 2第二位, 阴谋的古龙, 嫉妒着威斯顿的力量, 死在了威斯顿的偷袭下. 1第三位, 愤怒的古龙, 对威斯顿自相残杀的行为无比愤怒, 死在了奇迹的火焰中. 3第四位, 贪食的古龙, 并未对威斯顿做出反应, 威斯顿感概的在沉默中了解了他. 6第五位, 懒惰的古龙, 在奇迹的梦中死去. 5第六位, 贪色的古龙, 在其他古龙死后, 在自己诱惑的能力下被威斯顿贯穿身体而死. 4 数字表明死亡顺序, 在偷袭得手之后, 第一位古龙的战斗最为惨烈, 威斯顿身亡多次, 都复活了过来(原因下面讲.)之所以能屠杀古龙, 是因为威斯顿在晚宴的酒水中混入了托娜丽的血液. 血液来源源自威斯顿的祈愿, 愿望使得托娜丽的血液从自身流出.因此古龙永恒的生命被托娜丽的血液打破, 进而尽数死在威斯顿之手.威斯顿数次身亡又再次复活的原因, 托娜丽以生命为代价成为了威斯顿的诅咒”永誓追忆” 懒惰的古龙在梦中永远沉眠, 纯洁无垢的他, 在梦中死去, 他的龙鳞成为了后来威斯顿用以记载世间真相的启示之书.暴食的古龙在无尽的食欲中得到解放, 他的胃袋被威斯顿制作成后来世界的宝物之一 - 百宝之里 自此古龙战争结束(实际发动者就是第一第二与第六 即傲慢, 嫉妒, 色欲) 威斯顿此时常驻buff有祝福 世界垂怜 持有者释放奇迹极大幅度下降消耗以及所需代价诅咒 Alice的求知 即贪婪 但是威斯顿表现的更像是贪婪着知识与Alice如出一辙, 进一步也渴求着感情, 这也影响了之前对托娜丽的感情.诅咒 永誓追忆 托娜丽生命所化, 是针对遗忘, 死亡的诅咒, 只要威斯顿还回忆起托娜丽, 那么自身便不会死去, 会从世界的记忆中再次复活. 这个诅咒比较特殊, 诅咒针对的对象是威斯顿, 而实施诅咒的是世界, 一旦威斯顿发生死亡, 只要威斯顿记忆中还存在托娜丽就不会死去, 会被世界再次复活. 因为这个诅咒, 威斯顿作为古龙的永恒也被打破, 也会像后来的龙类一样衰老死去, 但是因为这个效果又以另一种形式获得了永恒. “托娜丽…” 为了弥补对世界的伤害, 威斯顿携其他龙族自大陆东方搬迁至西方, 一路上, 威斯顿传授着种植, 尺规, 数字, 语言等等多方面知识, 这一趟举族搬迁的旅途被后世(主要是原初的影响)传颂为智慧之旅, 传闻只要跟随这条路行走至大陆西方, 就会获得无上的智慧. (西游记) 威斯顿建造愚者之塔, 自身的诅咒(弱化)强加给剩余所有龙族, 剥夺了龙族永恒的力量, 追随智慧与知识的龙族, 也是对龙族所为的偿还, 自此, 龙族彻底安顿在大陆西方, 同时带来了无尽的恩惠, 时有大陆西方的生命来到威斯顿坐下渴求着智慧, 传授的智慧使得大陆西方变得无比繁荣, 同时确定了威斯顿 智慧之王的称号. 龙族在威斯顿的带领下渐渐分成两派, 一派以永恒的知识与智慧, 追求着世界的真相而进入愚者之塔修行的”智慧”为了明确的击杀因为智慧而堕落, 为了解放在渴求真相的道路上走偏的龙族, 而苦练针对奇迹, 针对魔法而执行刺杀的”武者”两者相辅相成, 互相制约, 而龙族内部的诅咒被威斯顿强行洗刷, 不再承受诅咒之苦. 龙族于西方平静之后, 传说也越来越出名, 只要踏上求知智慧的西方之路, 面见智慧之王必定得到举世惊人的知识, 智慧, 力量. 待定剧情 在此之后的剧情安排体现威斯顿的力量. 后续加入蛇人族的剧情, 蛇人族意外获得了能够抑制奇迹的力量从而胆敢向威斯顿发起挑战. 在奇迹被蛇人族压抑的时刻, 威斯顿发明了在矿产居多, 魔力稀缺的西方所使用的特有奇迹, 解放武装, 通过奇迹在体内释放武装肉体的办法击溃蛇人族. 但蛇人族此举也得到了威斯顿的赏析, 威斯顿奖励了蛇人族启示之书的一页(部分预言的力量). 重要剧情 在此之后, 威斯顿一直在破解永誓追忆的诅咒, 仍然想将托娜丽复活(Alice很早之前就消失无踪了), 最后的结果不尽人意, 威斯顿通过奇迹将一步分诅咒具现化出来, 并被威斯顿赋予真名”托娜丽”. 新生的托娜丽是自由的, 她继承了托娜丽一样的力量与外貌, 对威斯顿来说更像是女儿般的存在. 而对于自己的诅咒威斯顿却毫无办法, 托娜丽一并继承了求知贪婪的诅咒, 但好歹不比自己的强烈, 相信着托娜丽未来的潜力, 威斯顿着手研究终末之海的保持自我的办法. 在此之后剧情衔接与原初的交易, 威斯顿舍弃肉体, 将血液给予原初, 而自身在此前Ash的奇迹之下沉眠于终末之海, 等待着雪的到来. 待定剧情 进入终末之海 => 1. 感概于伟大意志的统一, 威斯顿首先要做到的就是如何保持自我不被卷入其中. 2. 对Ash的交易, 威斯顿可以在终末之海中苏醒数次(超过的话很有可能卷入意志之中就此死去) 3. 对一并处于终末之海的樱始终没有见面, 但是对原初, 意志的本体却有着多次交流此后陷入沉睡后再也没有直至雪的到来. “人之子啊, 怀揣着美好的愿望, 愿你的心意终能走出这片漫无尽头的海洋, 到达真实的希望.”雪在自身饮下冬的血液后连接到终末之海, 面见威斯顿时.肯定了雪的愿望, 并教导了她后来与托娜丽相似的奇迹 永恒守护(良性诅咒). 得以摆脱必然的命运. 托娜丽 - 新生威斯顿创造的生命之一, 也是唯一, 后续愚者之塔的统领者, 拥有和托娜丽一样的力量, “遗忘”和父亲威斯顿不一样的是, 她的诅咒非常微弱, 得以自由的活着.但又和威斯顿一样, 托娜丽出外旅行寻找着属于自我活着的意志. 待定剧情 托娜丽救下了一个人类, 渴望活着的意志似乎是触动了来自托娜丽不存在的记忆(威斯顿的影响) 为了救他托娜丽分予了自己的血液, 污染者就此诞生, 为后续亚龙人族的诞生埋下伏笔, 也是造成后续亚龙人悲剧的源头. 这个人类渴望活着的意志在饮下龙血后获得了强大的力量 - 传承规则, 也就是后续的宇继承的力量之一. 在亚龙族悲剧发生之后, 深感悲痛一直沉睡在愚者之塔中. 目前有关新生托娜丽的剧情暂时待定. 待定结局, 掌握着记忆的力量, 操控着死亡与遗忘, 在最后化作世界树的一部分并入新世界中, 这个是威斯顿复活的关键.威斯顿因此得以自世界树的记忆中再次复生, 为了目睹他所期盼的真相.然而托娜丽因此而逝去并非是威斯顿设计好的. 威斯顿长久以来的沉眠使得体内的两个诅咒分割成了两个人格.永誓追忆的诅咒致使威斯顿希望能够就此陪伴托娜丽死去而Alice的求知使得自己无论如何都要活着, 见证自己期盼的真相而利用了托娜丽记忆的能力, 进而诞生了这个结果.为了能够见证真相而舍弃了自己作为龙的肉体, 纯粹以记忆的形式的再次复生.","link":"/2021/11/08/Novel-Dream/"},{"title":"看看css 3D perspective的妙用 - 差别滚动","text":"这个是真的没想到, 还能这么玩的.利用css perspective来实现一个差别滚动的视觉效果 无图流, 直接走流程吧. 首先是 perspective 这个属性, 在W3CSchool上是这么描述的. perspective : 设置元素被查看位置的视图 很好理解, 在3D环境下, 元素被看的位置, 就相当把这个盒子放在哪里的那种意思. 注意, 如果不设置该值, transform: translateZ(Number) 该属性无效, 这也是perspective启动的效果, 即3D视图. 既然不开启又哪来的Z轴位移呢 一旦使用该属性, 影响盒子内部所有的子元素, 包括文字等. 这个属于理所当然了, 你装在盒子内的东西扔在一个3D视觉的任何地方, 当然影响视觉效果 在该例中, 只有父盒子启动该效果. (子元素启用就影响其套着的子元素.), 在一个启用了该属性的盒子中, XYZ轴简单说一下 X轴以盒子为准, 穿过盒子的垂直中心的一条横线, 使用rotateX(180deg)会使盒子的内容水平倒过来, 90deg会使内容在水平方向上变成一条细线, 因为此时内容躺平了. Y轴以盒子为准, 水平中心的一条竖线, 即使用rotateY(180deg)会使内容出现镜像翻转的样子, 90deg也和rotateX一样, 会使内容在垂直方向上变成一条线, 这属于站如松吗? Z轴就最好理解了, 就是一条穿过盒子, 穿出屏幕的一条线, 可能我描述的不好理解, 在rotateZ(Number) 设置任意角度, 盒子的内容会像时针一样绕着中间的一个点转, 那么从这个点, 穿过屏幕的一条线就是Z轴了. perspective: Number px, 该数值说明视角与该物体的距离, 以现实例子来说就是站在多少米外看这个东西. 它会影响transform中, 比如translateZ(Z轴位移), rotateY(Y轴上的旋转)等的视觉效果, 这个比较难解释嗷. 举一个简单的例子, 可能不太恰当. 比如我们距离这个观测物体, 比如一个横幅, 有100米. 即perspective: 100px (这里简单把px理解成米) 那么这个盒子内的某个东西, 离我们比较近, 是99米(也就是类比成translateZ(1px)). 如果translateZ(100px), 横幅直接冲脸了, 这时候那个字应该非常大. (确实很大) 如果这个横幅啊, 它的长度是200米. 如果它在Y轴上旋转90度. 那么这个物体就会直接撞上你的脸(rotateY(90deg)), 这个时候你看它就是一条垂直的线. 同理X轴旋转90deg你就看不到横幅上的字了. 因为它躺平了. 那么介绍完一些登场嘉宾, 那么下面实现这个东西的原理其实也就呼之欲出了. 父盒子启动perspective, 内容放在这个盒子内, 父盒子固定高度启动滚动条(overflowY, X的隐藏) 内部内容随便填, 分块填入, 高度之和超出父盒子设置的高度, 触发父盒子的overflowY滚动条. (这里的滚动条和3D没有任何关系) 然后设置差别滚动 transform: translateZ(Number), 这个根据上面很好理解, Z轴上的位移, 该数值越大, 说明内容离得越近(越靠近东西越大), 反之越小. 这个视觉效果取决于你设置perspective的数值大小. 其他的效果就随意了, 其实就这么多, 这个时候实际上内部的物体的滚动比例和 perspective 与 translateZ 的设置值有关. 下面等会给个例子perspective: 1px; translateZ: -1px. 那么内容会被缩小, 为原来的1/2. 如果是-2px, 那么就是1/4. .mytestBox { width: 600px; height: 600px; margin: 40px auto; background-image: linear-gradient(322deg, #62c298 0%, #1fc8db 51%, #2cb5e8 75%); overflow-x: hidden; overflow-y: auto; perspective: 1px; } .mytestBox .top { height: 1000px; transform: translateZ(-3px); } .mytestBox img { display: block; height: 100px; margin: auto; } .mytestBox .bottom { height: 800px; transform: translateZ(-1px); } .mytestBox .bottom2 { height: 800px; transform: translateZ(-2px); } .mytestBox .bottom3 { height: 800px; transform: translateZ(-3px); } .mytestBox .bottom4 { height: 200px; } .mytestBox p { width: 100%; font-size: 60px; font-weight: bold; color: #333; text-align: center; } 你好呀.~ my blog is here~ thanks for watching All tragedy erased. I see only wonders... -- Quirrel Never Left without Saying Goodbye. 忘记了所有的悲剧, 所见皆是奇迹 - 奎若","link":"/2021/07/03/%E6%9C%89%E7%82%B9%E9%82%A3%E4%B9%88%E6%84%8F%E6%80%9D%E7%9A%84css/"}],"tags":[{"name":"Diary","slug":"Diary","link":"/tags/Diary/"},{"name":"Study","slug":"Study","link":"/tags/Study/"},{"name":"Essay","slug":"Essay","link":"/tags/Essay/"},{"name":"Novel","slug":"Novel","link":"/tags/Novel/"},{"name":"Attitude","slug":"Attitude","link":"/tags/Attitude/"},{"name":"introductino","slug":"introductino","link":"/tags/introductino/"}],"categories":[{"name":"Diary","slug":"Diary","link":"/categories/Diary/"},{"name":"Code","slug":"Code","link":"/categories/Code/"},{"name":"FN(or, oval)","slug":"FN-or-oval","link":"/categories/FN-or-oval/"},{"name":"Life Style","slug":"Life-Style","link":"/categories/Life-Style/"},{"name":"get Start","slug":"get-Start","link":"/categories/get-Start/"},{"name":"introduction","slug":"get-Start/introduction","link":"/categories/get-Start/introduction/"}]}